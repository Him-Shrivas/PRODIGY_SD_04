def is_valid(board, row, col, num):
    # Check if 'num' is already in the current row or column
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False

    # Check if 'num' is already in the current 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(board):
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(board, row, col, num):
                        board[row][col] = num
                        if solve_sudoku(board):
                            return True
                        board[row][col] = 0
                return False
    return True

def print_sudoku(board):
    for row in board:
        print(" ".join(map(str, row)))

if __name__ == "__main__":
    puzzle=[]
    for i in range(9):
      for j in range(1):
        num=list(map(int,input(f'Enter number for row {i+1} between 1-9 and 0 represent empty cells:').split(',')))
        puzzle.append(num)

    if solve_sudoku(puzzle):
        print("Solved Sudoku Puzzle:")
        print_sudoku(puzzle)
    else:
        print("No solution exists.")
